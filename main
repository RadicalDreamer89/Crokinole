package basicgraphics;

import basicgraphics.*;
import basicgraphics.BasicFrame;
import basicgraphics.images.Picture;
import java.util.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowListener;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import java.awt.event.MouseEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseListener;
import javafx.scene.shape.Circle;
import javax.swing.JButton;
import javax.swing.JLabel;

/**
 *
 * @author Warren "Not Wayne" Douglas, wdougl6
 * @since 29th March, 2018
 */

public class Crokinole 
{
    static String[][] layout = {
        {"leftTop","game","puckCountP"},
        {"leftTop","game","puckCountP"},
        {"leftBot","game","puckCountG"},
        {"leftBot","game","puckCountG"},
    };
    
    public static void main(String[] args) {
        BasicFrame bf = new BasicFrame("Crokinole!");
        final Container cont = bf.getContentPane();
        final CardLayout cards = new CardLayout();
//        cont.setLayout(cards);
//        BasicContainer bc1 = new BasicContainer();
//        cont.add(bc1, "Splash");
//        final BasicContainer bc2 = new BasicContainer();
//        cont.add(bc2, "About");
//        final BasicContainer bc3 = new BasicContainer();
//        cont.add(bc3, "Game");
               
        final Color Brown = new Color(172, 138, 115);
        int puckCountP = 12;
        int puckCountG = 12;
        int scoreP = 0;
        int scoreG = 0;
        
        final Puck pP = new Puck()
        {
          @Override
            public void processEvent(SpriteCollisionEvent se)
            {
          
                if(se.eventType==CollisionEventType.SPRITE)
                {
                    Sprite sp2 = se.sprite2;
                    
                    double xVel2 = sp2.getVelX();
                    double yVel2 = sp2.getVelY();
                    double xVel1 = this.getVelX();
                    double yVel1 = this.getVelY();
                    
                    sp2.setVelX(xVel1);
                    sp2.setVelY(yVel1);
                    
                    this.setVelX(-xVel2);
                    this.setVelY(-yVel2);

                }
            }  
        };
        final Puck pG = new Puck();
        Bumper b1 = new Bumper()
        {
            @Override
            public void processEvent(SpriteCollisionEvent se)
            {
                Sprite sp2 = se.sprite2;
                
                double xVel = sp2.getVelX();
                double yVel = sp2.getVelY();
                
                if(se.eventType==CollisionEventType.SPRITE)
                {
                    sp2.setVelX(-(this.getVelX()));
                    sp2.setVelY(-(this.getVelY()));
                }
            }
        };

        
        
        
        
        final SpriteComponent sc = new SpriteComponent() 
        {
            @Override
            public void paintBackground(Graphics g) 
            {
                Dimension d = getSize();
                int rad = (int) Math.min(d.getHeight(), d.getWidth())/2;
                int centerX = getWidth() /2;
                int centerY = getHeight() / 2;
                int m = Math.min(centerX, centerY);
                int r2 = Math.abs(m - rad) / 2;

                g.setColor(Brown);
                g.fillRect(0, 0, d.width, d.height);
                
                g.setColor(Color.BLACK);
                g.drawOval(d.width/2 - rad, d.height/2 - rad, 2 * rad, 2 * rad);
                g.drawOval((d.width/2 - rad/2), d.height/2 - rad/2,  rad, rad);
                g.drawOval((d.width/2 - rad/4), d.height/2 - rad/4,  rad/2, rad/2);
                g.drawOval((d.width/2 - rad/16), d.height/2 - rad/16,  rad/8, rad/8);
                
                
                
                g.setColor(Color.blue);
                for(int i = 0; i < 8; i++) 
                {
                    double dist = 2 * Math.PI * i / 8;
                    int x = (int) Math.round(centerX + rad * Math.cos(dist));
                    int y = (int) Math.round(centerY + rad * Math.sin(dist));
                    g.drawOval(centerX - rad, centerY - rad, 2 * rad, 2 * rad);
                    g.fillOval(x - r2, y - r2, 2 * r2, 2 * r2);
                }
                
                g.drawLine(d.width/2, 1000, d.width/2, 750);
                g.drawLine(d.width/2, 0, d.width/2, 250);
                g.drawLine(460, 500, 710, 500);
                g.drawLine(1210, 500, 1460, 500);                
                
            }

                };

        
        
        MouseListener ml = new MouseListener() 
        {
            double force= 0; 
            double startX, startY;
            double endX, endY;
            
            @Override
            public void mouseClicked(MouseEvent e) 
            {
                int x, y;
                x = e.getX();
                y = e.getY();

//                JOptionPane.showMessageDialog(sc, "Coordinates: X -" + x + " Y - " + y);
                
                
            }

            
            @Override
            public void mousePressed(MouseEvent e) 
            {
                startX = e.getX();
                startY = e.getY();
                
            }

            @Override
            public void mouseReleased(MouseEvent e) 
            {
                
                endX =  e.getX() - startX;
                endY =  e.getY() - startY;
                force = Math.sqrt(Math.pow(endX, 2) + Math.pow(endY, 2));
                final double width=.005, amp = 10.0;
                
                
                pP.setVelX((amp * Math.tanh(width * force)) * (endX/force));
                pP.setVelY((amp * Math.tanh(width * force)) * (endY/force));
//                pG.setVelX((amp * Math.tanh(width * force)) * (endX/force));
//                pG.setVelY((amp * Math.tanh(width * force)) * (endX/force));
//                JOptionPane.showMessageDialog(sc, "Distance - " + (endX - endY) + "Coord X-" + xCoord + "Y-" + yCoord);
                
                
                       
                
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
        };
        sc.addMouseListener(ml);
        
     

        sc.setPreferredSize(new Dimension(1920, 1000));
        
//        String[][] splashlayout = {
//            {"Title"},
//            {"Start Game"},
//            {"How To Play"}
//            
//        };
//        bc1.add(splashlayout, "Title", new JLabel("Crokinole!"));
//        JButton jstart = new JButton("Start Game");
//        jstart.addActionListener(new ActionListener()
//                {
//                    @Override
//                    public void actionPerformed(ActionEvent e) {
//                    cards.show(cont,"Start Game");
//                    
//                    bc2.requestFocus();
//                }
//            });
//        bc1.add(splashlayout, "Start Game", jstart);
//        
//        bc2.add(splashlayout, "How To Play", new JLabel("How To Play"));
//        JButton howTo = new JButton("How To Play?");
//        
//        howTo.addActionListener(new ActionListener()
//        {
//            @Override
//            public void actionPerformed(ActionEvent ae) 
//            {
//                cards.show(cont, "How To Play");
//                
//                bc3.requestFocus();
//            }
//            
//        });
        
        
        
        
        bf.add(layout, "game", sc);
        bf.add(layout, "leftTop", new JLabel("Purple Score -" + scoreP));
        bf.add(layout, "leftBot", new JLabel("Gold Score -" + scoreG));
        bf.add(layout, "puckCountP", new JLabel("Purple Pucks Remaining - " + puckCountP));
        bf.add(layout, "puckCountG", new JLabel("Gold Pucks Remaining - " + puckCountG));
        
        
        
        bf.addKeyListener(new KeyAdapter() {

            @Override
            public void keyPressed(KeyEvent ke) {
                switch (ke.getKeyCode()) {
    
                    case KeyEvent.VK_RIGHT:
                        pP.moveRight();
                        break;
                    case KeyEvent.VK_LEFT:
                        pP.moveLeft();

                }
            }

        });

        

        bf.show();
        pG.pieceG(sc);
        pP.pieceP(sc);
        b1.Bumper(sc);

        
        
                  
        sc.start(0,10);
        

    }
}
