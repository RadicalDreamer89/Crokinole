package basicgraphics;

import basicgraphics.*;
import basicgraphics.BasicFrame;
import basicgraphics.images.Picture;
import java.util.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import java.awt.event.MouseEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseListener;


/**
 *
 * @author Warren "Not Wayne" Douglas, wdougl6
 * @since 29th March, 2018
 */
public class Crokinole {

    static String[][] layout = {
        {"game", "puckCountP"},
        {"game", "puckCountP"},
        {"game", "puckCountG"},
        {"game", "puckCountG"},};

    public static void main(String[] args) {
        BasicFrame bf = new BasicFrame("Crokinole!");
        final Container cont = bf.getContentPane();
        final CardLayout cards = new CardLayout();


        final Color Brown = new Color(172, 138, 115);
        int puckCount = 24;
        int scoreP = 0;
        int scoreG = 0;

        final Puck p1 = new Puck() {
            @Override
            public void processEvent(SpriteCollisionEvent se) 
            {

                if (se.eventType == CollisionEventType.SPRITE) 
                {
                    
                    Sprite sp2 = se.sprite2;

                    double xVel2 = sp2.getVelX();
                    double yVel2 = sp2.getVelY();
                    double xVel1 = this.getVelX();
                    double yVel1 = this.getVelY();
                    
                    if(sp2.getClass().equals(Bumper.class))
                    {
                        this.setVelX(-xVel1);
                        this.setVelY(-yVel1);
                        
                    }
                    else if(sp2.getClass().equals(Puck.class))
                    {
                        this.setVelX(-xVel1);
                        this.setVelY(-yVel1);
                        sp2.setVelX(xVel1);
                        sp2.setVelY(yVel1);
                    }
                    
                  
                    
                }
                }
            
        };
        final Puck p2 = new Puck() {
            @Override
            public void processEvent(SpriteCollisionEvent se) 
            {

                if (se.eventType == CollisionEventType.SPRITE) 
                {
                    
                    Sprite sp2 = se.sprite2;

                    double xVel2 = sp2.getVelX();
                    double yVel2 = sp2.getVelY();
                    double xVel1 = this.getVelX();
                    double yVel1 = this.getVelY();
                    
                    if(sp2.getClass().equals(Bumper.class))
                    {
                        this.setVelX(-xVel1);
                        this.setVelY(-yVel1);
                        
                    }
                    else if(sp2.getClass().equals(Puck.class))
                    {
                        this.setVelX(-xVel1);
                        this.setVelY(-yVel1);
                        sp2.setVelX(xVel1);
                        sp2.setVelY(yVel1);
                    }
                    
                  
                    
                }
                }
            
        };
        
        final Puck p3 = new Puck() {
            @Override
            public void processEvent(SpriteCollisionEvent se) 
            {

                if (se.eventType == CollisionEventType.SPRITE) 
                {
                    
                    Sprite sp2 = se.sprite2;

                    double xVel2 = sp2.getVelX();
                    double yVel2 = sp2.getVelY();
                    double xVel1 = this.getVelX();
                    double yVel1 = this.getVelY();
                    
                    if(sp2.getClass().equals(Bumper.class))
                    {
                        this.setVelX(-xVel1);
                        this.setVelY(-yVel1);
                        
                    }
                    else if(sp2.getClass().equals(Puck.class))
                    {
                        this.setVelX(-xVel1);
                        this.setVelY(-yVel1);
                        sp2.setVelX(xVel1);
                        sp2.setVelY(yVel1);
                    }
                    
                  
                    
                }
                }
            
        };
        
        final Puck p4 = new Puck() {
            @Override
            public void processEvent(SpriteCollisionEvent se) 
            {

                if (se.eventType == CollisionEventType.SPRITE) 
                {
                    
                    Sprite sp2 = se.sprite2;

                    double xVel2 = sp2.getVelX();
                    double yVel2 = sp2.getVelY();
                    double xVel1 = this.getVelX();
                    double yVel1 = this.getVelY();
                    
                    if(sp2.getClass().equals(Bumper.class))
                    {
                        this.setVelX(-xVel1);
                        this.setVelY(-yVel1);
                        
                    }
                    else if(sp2.getClass().equals(Puck.class))
                    {
                        this.setVelX(-xVel1);
                        this.setVelY(-yVel1);
                        sp2.setVelX(xVel1);
                        sp2.setVelY(yVel1);
                    }
                    
                  
                    
                }
                }
            
        };
        
        final Puck p5 = new Puck() {
            @Override
            public void processEvent(SpriteCollisionEvent se) 
            {

                if (se.eventType == CollisionEventType.SPRITE) 
                {
                    
                    Sprite sp2 = se.sprite2;

                    double xVel2 = sp2.getVelX();
                    double yVel2 = sp2.getVelY();
                    double xVel1 = this.getVelX();
                    double yVel1 = this.getVelY();
                    
                    if(sp2.getClass().equals(Bumper.class))
                    {
                        this.setVelX(-xVel1);
                        this.setVelY(-yVel1);
                        
                    }
                    else if(sp2.getClass().equals(Puck.class))
                    {
                        this.setVelX(-xVel1);
                        this.setVelY(-yVel1);
                        sp2.setVelX(xVel1);
                        sp2.setVelY(yVel1);
                    }
                    
                  
                    
                }
                }
            
        };
        
        final Puck p6 = new Puck() {
            @Override
            public void processEvent(SpriteCollisionEvent se) 
            {

                if (se.eventType == CollisionEventType.SPRITE) 
                {
                    
                    Sprite sp2 = se.sprite2;

                    double xVel2 = sp2.getVelX();
                    double yVel2 = sp2.getVelY();
                    double xVel1 = this.getVelX();
                    double yVel1 = this.getVelY();
                    
                    if(sp2.getClass().equals(Bumper.class))
                    {
                        this.setVelX(-xVel1);
                        this.setVelY(-yVel1);
                        
                    }
                    else if(sp2.getClass().equals(Puck.class))
                    {
                        this.setVelX(-xVel1);
                        this.setVelY(-yVel1);
                        sp2.setVelX(xVel1);
                        sp2.setVelY(yVel1);
                    }
                    
                  
                    
                }
                }
            
        };
        
        final Puck p7 = new Puck() {
            @Override
            public void processEvent(SpriteCollisionEvent se) 
            {

                if (se.eventType == CollisionEventType.SPRITE) 
                {
                    
                    Sprite sp2 = se.sprite2;

                    double xVel2 = sp2.getVelX();
                    double yVel2 = sp2.getVelY();
                    double xVel1 = this.getVelX();
                    double yVel1 = this.getVelY();
                    
                    if(sp2.getClass().equals(Bumper.class))
                    {
                        this.setVelX(-xVel1);
                        this.setVelY(-yVel1);
                        
                    }
                    else if(sp2.getClass().equals(Puck.class))
                    {
                        this.setVelX(-xVel1);
                        this.setVelY(-yVel1);
                        sp2.setVelX(xVel1);
                        sp2.setVelY(yVel1);
                    }
                    
                  
                    
                }
                }
            
        };
        
        final Puck p8 = new Puck() {
            @Override
            public void processEvent(SpriteCollisionEvent se) 
            {

                if (se.eventType == CollisionEventType.SPRITE) 
                {
                    
                    Sprite sp2 = se.sprite2;

                    double xVel2 = sp2.getVelX();
                    double yVel2 = sp2.getVelY();
                    double xVel1 = this.getVelX();
                    double yVel1 = this.getVelY();
                    
                    if(sp2.getClass().equals(Bumper.class))
                    {
                        this.setVelX(-xVel1);
                        this.setVelY(-yVel1);
                        
                    }
                    else if(sp2.getClass().equals(Puck.class))
                    {
                        this.setVelX(-xVel1);
                        this.setVelY(-yVel1);
                        sp2.setVelX(xVel1);
                        sp2.setVelY(yVel1);
                    }
                    
                  
                    
                }
                }
            
        };
        
        final Puck p9 = new Puck() {
            @Override
            public void processEvent(SpriteCollisionEvent se) 
            {

                if (se.eventType == CollisionEventType.SPRITE) 
                {
                    
                    Sprite sp2 = se.sprite2;

                    double xVel2 = sp2.getVelX();
                    double yVel2 = sp2.getVelY();
                    double xVel1 = this.getVelX();
                    double yVel1 = this.getVelY();
                    
                    if(sp2.getClass().equals(Bumper.class))
                    {
                        this.setVelX(-xVel1);
                        this.setVelY(-yVel1);
                        
                    }
                    else if(sp2.getClass().equals(Puck.class))
                    {
                        this.setVelX(-xVel1);
                        this.setVelY(-yVel1);
                        sp2.setVelX(xVel1);
                        sp2.setVelY(yVel1);
                    }
                    
                  
                    
                }
                }
            
        };
        
        final Puck p10 = new Puck() {
            @Override
            public void processEvent(SpriteCollisionEvent se) 
            {

                if (se.eventType == CollisionEventType.SPRITE) 
                {
                    
                    Sprite sp2 = se.sprite2;

                    double xVel2 = sp2.getVelX();
                    double yVel2 = sp2.getVelY();
                    double xVel1 = this.getVelX();
                    double yVel1 = this.getVelY();
                    
                    if(sp2.getClass().equals(Bumper.class))
                    {
                        this.setVelX(-xVel1);
                        this.setVelY(-yVel1);
                        
                    }
                    else if(sp2.getClass().equals(Puck.class))
                    {
                        this.setVelX(-xVel1);
                        this.setVelY(-yVel1);
                        sp2.setVelX(xVel1);
                        sp2.setVelY(yVel1);
                    }
                    
                  
                    
                }
                }
            
        };
        
        final Puck p11 = new Puck() {
            @Override
            public void processEvent(SpriteCollisionEvent se) 
            {

                if (se.eventType == CollisionEventType.SPRITE) 
                {
                    
                    Sprite sp2 = se.sprite2;

                    double xVel2 = sp2.getVelX();
                    double yVel2 = sp2.getVelY();
                    double xVel1 = this.getVelX();
                    double yVel1 = this.getVelY();
                    
                    if(sp2.getClass().equals(Bumper.class))
                    {
                        this.setVelX(-xVel1);
                        this.setVelY(-yVel1);
                        
                    }
                    else if(sp2.getClass().equals(Puck.class))
                    {
                        this.setVelX(-xVel1);
                        this.setVelY(-yVel1);
                        sp2.setVelX(xVel1);
                        sp2.setVelY(yVel1);
                    }
                    
                  
                    
                }
                }
            
        };
        
        final Puck p12 = new Puck() {
            @Override
            public void processEvent(SpriteCollisionEvent se) 
            {

                if (se.eventType == CollisionEventType.SPRITE) 
                {
                    
                    Sprite sp2 = se.sprite2;

                    double xVel2 = sp2.getVelX();
                    double yVel2 = sp2.getVelY();
                    double xVel1 = this.getVelX();
                    double yVel1 = this.getVelY();
                    
                    if(sp2.getClass().equals(Bumper.class))
                    {
                        this.setVelX(-xVel1);
                        this.setVelY(-yVel1);
                        
                    }
                    else if(sp2.getClass().equals(Puck.class))
                    {
                        this.setVelX(-xVel1);
                        this.setVelY(-yVel1);
                        sp2.setVelX(xVel1);
                        sp2.setVelY(yVel1);
                    }
                    
                  
                    
                }
                }
            
        };
        
        
        final Puck g1 = new Puck()
        {
            @Override
            public void processEvent(SpriteCollisionEvent se) 
            {

                if (se.eventType == CollisionEventType.SPRITE) 
                {
                    
                    Sprite sp2 = se.sprite2;

                    double xVel2 = sp2.getVelX();
                    double yVel2 = sp2.getVelY();
                    double xVel1 = this.getVelX();
                    double yVel1 = this.getVelY();
                    
                    if(sp2.getClass().equals(Bumper.class))
                    {
                        this.setVelX(-xVel1);
                        this.setVelY(-yVel1);
                        
                    }
                }
            }
        };
        
        final Puck g2 = new Puck()
        {
            @Override
            public void processEvent(SpriteCollisionEvent se) 
            {

                if (se.eventType == CollisionEventType.SPRITE) 
                {
                    
                    Sprite sp2 = se.sprite2;

                    double xVel2 = sp2.getVelX();
                    double yVel2 = sp2.getVelY();
                    double xVel1 = this.getVelX();
                    double yVel1 = this.getVelY();
                    
                    if(sp2.getClass().equals(Bumper.class))
                    {
                        this.setVelX(-xVel1);
                        this.setVelY(-yVel1);
                        
                    }
                }
            }
        };
        
        final Puck g3 = new Puck()
        {
            @Override
            public void processEvent(SpriteCollisionEvent se) 
            {

                if (se.eventType == CollisionEventType.SPRITE) 
                {
                    
                    Sprite sp2 = se.sprite2;

                    double xVel2 = sp2.getVelX();
                    double yVel2 = sp2.getVelY();
                    double xVel1 = this.getVelX();
                    double yVel1 = this.getVelY();
                    
                    if(sp2.getClass().equals(Bumper.class))
                    {
                        this.setVelX(-xVel1);
                        this.setVelY(-yVel1);
                        
                    }
                }
            }
        };
        
        final Puck g4 = new Puck()
        {
            @Override
            public void processEvent(SpriteCollisionEvent se) 
            {

                if (se.eventType == CollisionEventType.SPRITE) 
                {
                    
                    Sprite sp2 = se.sprite2;

                    double xVel2 = sp2.getVelX();
                    double yVel2 = sp2.getVelY();
                    double xVel1 = this.getVelX();
                    double yVel1 = this.getVelY();
                    
                    if(sp2.getClass().equals(Bumper.class))
                    {
                        this.setVelX(-xVel1);
                        this.setVelY(-yVel1);
                        
                    }
                }
            }
        };
        
        final Puck g5 = new Puck()
        {
            @Override
            public void processEvent(SpriteCollisionEvent se) 
            {

                if (se.eventType == CollisionEventType.SPRITE) 
                {
                    
                    Sprite sp2 = se.sprite2;

                    double xVel2 = sp2.getVelX();
                    double yVel2 = sp2.getVelY();
                    double xVel1 = this.getVelX();
                    double yVel1 = this.getVelY();
                    
                    if(sp2.getClass().equals(Bumper.class))
                    {
                        this.setVelX(-xVel1);
                        this.setVelY(-yVel1);
                        
                    }
                }
            }
        };
        
        final Puck g6 = new Puck()
        {
            @Override
            public void processEvent(SpriteCollisionEvent se) 
            {

                if (se.eventType == CollisionEventType.SPRITE) 
                {
                    
                    Sprite sp2 = se.sprite2;

                    double xVel2 = sp2.getVelX();
                    double yVel2 = sp2.getVelY();
                    double xVel1 = this.getVelX();
                    double yVel1 = this.getVelY();
                    
                    if(sp2.getClass().equals(Bumper.class))
                    {
                        this.setVelX(-xVel1);
                        this.setVelY(-yVel1);
                        
                    }
                }
            }
        };
        
        final Puck g7 = new Puck()
        {
            @Override
            public void processEvent(SpriteCollisionEvent se) 
            {

                if (se.eventType == CollisionEventType.SPRITE) 
                {
                    
                    Sprite sp2 = se.sprite2;

                    double xVel2 = sp2.getVelX();
                    double yVel2 = sp2.getVelY();
                    double xVel1 = this.getVelX();
                    double yVel1 = this.getVelY();
                    
                    if(sp2.getClass().equals(Bumper.class))
                    {
                        this.setVelX(-xVel1);
                        this.setVelY(-yVel1);
                        
                    }
                }
            }
        };
        
        final Puck g8 = new Puck()
        {
            @Override
            public void processEvent(SpriteCollisionEvent se) 
            {

                if (se.eventType == CollisionEventType.SPRITE) 
                {
                    
                    Sprite sp2 = se.sprite2;

                    double xVel2 = sp2.getVelX();
                    double yVel2 = sp2.getVelY();
                    double xVel1 = this.getVelX();
                    double yVel1 = this.getVelY();
                    
                    if(sp2.getClass().equals(Bumper.class))
                    {
                        this.setVelX(-xVel1);
                        this.setVelY(-yVel1);
                        
                    }
                }
            }
        };
        
        final Puck g9 = new Puck()
        {
            @Override
            public void processEvent(SpriteCollisionEvent se) 
            {

                if (se.eventType == CollisionEventType.SPRITE) 
                {
                    
                    Sprite sp2 = se.sprite2;

                    double xVel2 = sp2.getVelX();
                    double yVel2 = sp2.getVelY();
                    double xVel1 = this.getVelX();
                    double yVel1 = this.getVelY();
                    
                    if(sp2.getClass().equals(Bumper.class))
                    {
                        this.setVelX(-xVel1);
                        this.setVelY(-yVel1);
                        
                    }
                }
            }
        };
        
        final Puck g10 = new Puck()
        {
            @Override
            public void processEvent(SpriteCollisionEvent se) 
            {

                if (se.eventType == CollisionEventType.SPRITE) 
                {
                    
                    Sprite sp2 = se.sprite2;

                    double xVel2 = sp2.getVelX();
                    double yVel2 = sp2.getVelY();
                    double xVel1 = this.getVelX();
                    double yVel1 = this.getVelY();
                    
                    if(sp2.getClass().equals(Bumper.class))
                    {
                        this.setVelX(-xVel1);
                        this.setVelY(-yVel1);
                        
                    }
                }
            }
        };
        
        final Puck g11 = new Puck()
        {
            @Override
            public void processEvent(SpriteCollisionEvent se) 
            {

                if (se.eventType == CollisionEventType.SPRITE) 
                {
                    
                    Sprite sp2 = se.sprite2;

                    double xVel2 = sp2.getVelX();
                    double yVel2 = sp2.getVelY();
                    double xVel1 = this.getVelX();
                    double yVel1 = this.getVelY();
                    
                    if(sp2.getClass().equals(Bumper.class))
                    {
                        this.setVelX(-xVel1);
                        this.setVelY(-yVel1);
                        
                    }
                }
            }
        };
        
        final Puck lastG = new Puck()
        {
            @Override
            public void processEvent(SpriteCollisionEvent se) 
            {

                if (se.eventType == CollisionEventType.SPRITE) 
                {
                    
                    Sprite sp2 = se.sprite2;

                    double xVel2 = sp2.getVelX();
                    double yVel2 = sp2.getVelY();
                    double xVel1 = this.getVelX();
                    double yVel1 = this.getVelY();
                    
                    if(sp2.getClass().equals(Bumper.class))
                    {
                        this.setVelX(-xVel1);
                        this.setVelY(-yVel1);
                        
                    }
                }
            }
        };

        final SpriteComponent sc = new SpriteComponent() 
        {
            @Override
            public void paintBackground(Graphics g) 
            {
                Dimension d = getSize();
                SpriteComponent bu = new SpriteComponent();
                int rad = (int) Math.min(d.getHeight(), d.getWidth()) / 2;
                int centerX = getWidth() / 2;
                int centerY = getHeight() / 2;
                int m = Math.min(centerX, centerY);
                int r2 = Math.abs(m - rad) / 2;

                g.setColor(Brown);
                g.fillRect(0, 0, d.width, d.height);

                g.setColor(Color.BLACK);
                g.drawOval(d.width / 2 - rad, d.height / 2 - rad, 2 * rad, 2 * rad);
                g.drawOval((d.width / 2 - rad / 2), d.height / 2 - rad / 2, rad, rad);
                g.drawOval((d.width / 2 - rad / 4), d.height / 2 - rad / 4, rad / 2, rad / 2);
                g.drawOval((d.width / 2 - rad / 16), d.height / 2 - rad / 16, rad / 8, rad / 8);

                g.drawLine(d.width / 2, 1000, d.width / 2, 750);
                g.drawLine(d.width / 2, 0, d.width / 2, 250);
                g.drawLine(460, 500, 710, 500);
                g.drawLine(1210, 500, 1460, 500);

            }

        };


        MouseListener ml = new MouseListener() 
        {
            double force = 0;
            double startX, startY;
            double endX, endY;

            @Override
            public void mouseClicked(MouseEvent e) 
            {
                int x, y;
                x = e.getX();
                y = e.getY();


            }

            @Override
            public void mousePressed(MouseEvent e) 
            {
                startX = e.getX();
                startY = e.getY();

            }

            @Override
            public void mouseReleased(MouseEvent e) 
            {
                int puckCount = 24;
                endX = e.getX() - startX;
                endY = e.getY() - startY;
                force = Math.sqrt(Math.pow(endX, 2) + Math.pow(endY, 2));
                final double width = .005, amp = 10.0;

                for (int i = 0; i < puckCount; i++) 
                {
                    if (puckCount % 2 == 0) 
                    {
                        p1.setVelX((amp * Math.tanh(width * force)) * (endX / force));
                        p1.setVelY((amp * Math.tanh(width * force)) * (endY / force));
                        p2.setVelX((amp * Math.tanh(width * force)) * (endX / force));
                        p2.setVelY((amp * Math.tanh(width * force)) * (endY / force));
                        p3.setVelX((amp * Math.tanh(width * force)) * (endX / force));
                        p3.setVelY((amp * Math.tanh(width * force)) * (endY / force));
                        p4.setVelX((amp * Math.tanh(width * force)) * (endX / force));
                        p4.setVelY((amp * Math.tanh(width * force)) * (endY / force));
                        p5.setVelX((amp * Math.tanh(width * force)) * (endX / force));
                        p5.setVelY((amp * Math.tanh(width * force)) * (endY / force));
                        p6.setVelX((amp * Math.tanh(width * force)) * (endX / force));
                        p6.setVelY((amp * Math.tanh(width * force)) * (endY / force));
                        p7.setVelX((amp * Math.tanh(width * force)) * (endX / force));
                        p7.setVelY((amp * Math.tanh(width * force)) * (endY / force));
                        p8.setVelX((amp * Math.tanh(width * force)) * (endX / force));
                        p8.setVelY((amp * Math.tanh(width * force)) * (endY / force));
                        p9.setVelX((amp * Math.tanh(width * force)) * (endX / force));
                        p9.setVelY((amp * Math.tanh(width * force)) * (endY / force));
                        p10.setVelX((amp * Math.tanh(width * force)) * (endX / force));
                        p10.setVelY((amp * Math.tanh(width * force)) * (endY / force));
                        p11.setVelX((amp * Math.tanh(width * force)) * (endX / force));
                        p11.setVelY((amp * Math.tanh(width * force)) * (endY / force));
                        p12.setVelX((amp * Math.tanh(width * force)) * (endX / force));
                        p12.setVelY((amp * Math.tanh(width * force)) * (endY / force));
                    } 
                    else if (puckCount % 2 == 1) 
                    {
                        g1.setVelX((amp * Math.tanh(width * force)) * (endX / force));
                        g1.setVelY((amp * Math.tanh(width * force)) * (endY / force));
                        g2.setVelX((amp * Math.tanh(width * force)) * (endX / force));
                        g2.setVelY((amp * Math.tanh(width * force)) * (endY / force));
                        g3.setVelX((amp * Math.tanh(width * force)) * (endX / force));
                        g3.setVelY((amp * Math.tanh(width * force)) * (endY / force));
                        g4.setVelX((amp * Math.tanh(width * force)) * (endX / force));
                        g4.setVelY((amp * Math.tanh(width * force)) * (endY / force));
                        g5.setVelX((amp * Math.tanh(width * force)) * (endX / force));
                        g5.setVelY((amp * Math.tanh(width * force)) * (endY / force));
                        g6.setVelX((amp * Math.tanh(width * force)) * (endX / force));
                        g6.setVelY((amp * Math.tanh(width * force)) * (endY / force));
                        g7.setVelX((amp * Math.tanh(width * force)) * (endX / force));
                        g7.setVelY((amp * Math.tanh(width * force)) * (endY / force));
                        g8.setVelX((amp * Math.tanh(width * force)) * (endX / force));
                        g8.setVelY((amp * Math.tanh(width * force)) * (endY / force));
                        g9.setVelX((amp * Math.tanh(width * force)) * (endX / force));
                        g9.setVelY((amp * Math.tanh(width * force)) * (endY / force));
                        g10.setVelX((amp * Math.tanh(width * force)) * (endX / force));
                        g10.setVelY((amp * Math.tanh(width * force)) * (endY / force));
                        g11.setVelX((amp * Math.tanh(width * force)) * (endX / force));
                        g11.setVelY((amp * Math.tanh(width * force)) * (endY / force));
                        lastG.setVelX((amp * Math.tanh(width * force)) * (endX / force));
                        lastG.setVelY((amp * Math.tanh(width * force)) * (endY / force));
                    }

                }
            }

            @Override
            public void mouseEntered(MouseEvent e) 
            {
            }

            @Override
            public void mouseExited(MouseEvent e) 
            {
            }
        };
        sc.addMouseListener(ml);

        sc.setPreferredSize(new Dimension(1920, 1000));

        bf.add(layout, "game", sc);
       
        bf.addKeyListener(new KeyAdapter() 
        {

            @Override
            public void keyPressed(KeyEvent ke) 
            {
                
                switch (ke.getKeyCode()) 
                {
                    
                        case KeyEvent.VK_RIGHT:
                            p1.moveRight();
                            break;
                        case KeyEvent.VK_LEFT:
                            p1.moveLeft();
                            break;
                }
            }

        });

        bf.show();
        
        
        
        Dimension d = sc.getSize();
        int rad = (int) Math.min(d.getHeight(), d.getWidth()) / 2;
        int centerX = d.width/2;
        int centerY = d.height/2;
        for (int i = 0; i <= 8; i++) 
        {
            double dist = 2 * Math.PI * i / 8;
            int xLoc = (int) Math.round((centerX - 5) + rad / 4 * Math.cos(dist));
            int yLoc = (int) Math.round((centerY - 5) + rad / 4 * Math.sin(dist));
            final Bumper b = new Bumper(sc);
            
            
            b.setX(xLoc);
            b.setY(yLoc);

        }
        g1.pieceG(sc);
        g2.pieceG(sc);
        g3.pieceG(sc);
        g4.pieceG(sc);
        g5.pieceG(sc);
        g6.pieceG(sc);
        g7.pieceG(sc);
        g8.pieceG(sc);
        g9.pieceG(sc);
        g10.pieceG(sc);
        g11.pieceG(sc);
        lastG.pieceG(sc);
        p1.pieceP(sc);
        p2.pieceP(sc);
        p3.pieceP(sc);
        p4.pieceP(sc);
        p5.pieceP(sc);
        p6.pieceP(sc);
        p7.pieceP(sc);
        p8.pieceP(sc);
        p9.pieceP(sc);
        p10.pieceP(sc);
        p11.pieceP(sc);
        p12.pieceP(sc);


        sc.start(0, 10);

    }
}
